-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelPawel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsPawel

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdt :: AbsPawel.Idt -> Result
transIdt x = case x of
  AbsPawel.Idt string -> failure x

transProgram :: AbsPawel.Program -> Result
transProgram x = case x of
  AbsPawel.Prog decls -> failure x

transDecl :: AbsPawel.Decl -> Result
transDecl x = case x of
  AbsPawel.DExp idt typedecls exp -> failure x
  AbsPawel.DLOp integer idt1 idt2 -> failure x
  AbsPawel.DROp integer idt1 idt2 -> failure x
  AbsPawel.DType idt idts variants -> failure x

transVariant :: AbsPawel.Variant -> Result
transVariant x = case x of
  AbsPawel.VarType idt types -> failure x

transType :: AbsPawel.Type -> Result
transType x = case x of
  AbsPawel.TInt -> failure x
  AbsPawel.TVar idt -> failure x
  AbsPawel.TFunc type_1 type_2 -> failure x
  AbsPawel.TVariant idt types -> failure x

transExp :: AbsPawel.Exp -> Result
transExp x = case x of
  AbsPawel.EUnparsed exps -> failure x
  AbsPawel.EVar idt -> failure x
  AbsPawel.EInt integer -> failure x
  AbsPawel.ELet idt typedecls exp1 exp2 -> failure x
  AbsPawel.EIf exp1 exp2 exp3 -> failure x
  AbsPawel.ELam idts exp -> failure x
  AbsPawel.EMatch idt matchcases -> failure x

transMatchCase :: AbsPawel.MatchCase -> Result
transMatchCase x = case x of
  AbsPawel.Case match exp -> failure x

transMatch :: AbsPawel.Match -> Result
transMatch x = case x of
  AbsPawel.MVar idt -> failure x
  AbsPawel.MList matchs -> failure x

transTypeDecl :: AbsPawel.TypeDecl -> Result
transTypeDecl x = case x of
  AbsPawel.TDVar idt -> failure x
  AbsPawel.TDType idt type_ -> failure x
